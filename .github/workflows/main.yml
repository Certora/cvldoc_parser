name: Test

on:
  push:
    branches:
      - master
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - master

env:
  AWS_REGION: "us-west-2"
  DEFAULT_PYTHON_VERSION: "3.11"

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  tests:
    runs-on: ubuntu-latest
    outputs:
      cvl_parser_version: ${{ steps.get_version.outputs.CVL_DOC_PARSER_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ env.DEFAULT_PYTHON_VERSION }}"
      - name: Install Dunamai
        run: pip install dunamai
      - name: Get the version
        id: get_version
        run: |
          CVL_DOC_PARSER_VERSION=$(dunamai from git --style pep440)
          echo "${CVL_DOC_PARSER_VERSION}"
          echo "CVL_DOC_PARSER_VERSION=$CVL_DOC_PARSER_VERSION" >> $GITHUB_ENV
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run Syntax Check
        run: cd src/python_wrapper && cargo fmt --all --check
      - name: Run tests
        if: success() || failure()
        run: cargo test

  build:
    name: build on ${{ matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    needs: tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          # Linux
          - os: ubuntu
            manylinux: auto
            target: aarch64
          # - os: ubuntu
          #   manylinux: auto
          #   target: armv7
          - os: ubuntu
            manylinux: auto
            target: x86_64

          # # musllinux
          - os: ubuntu
            target: x86_64
            manylinux: musllinux_1_1
          # - os: ubuntu
          #   target: aarch64
          #   manylinux: musllinux_1_1

          # # Windows
          - os: windows
            target: x86_64
          # - os: windows
          #   target: aarch64

          # MacOs
          # - os: macos
          #   target: x86_64
          - os: macos
            target: aarch64

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ env.DEFAULT_PYTHON_VERSION }}"
      - run: pip install -U twine

      - name: Get Dynamic Version
        id: get_version
        run: |
          VERSION_PLACEHOLDER='version = "[0-9]+\.[0-9]+\.[0-9]+"'
          NEW_VERSION='version = "${{ needs.tests.outputs.cvl_parser_version }}"'
          sed -i -E "s/^${VERSION_PLACEHOLDER}$/${NEW_VERSION}/g" src/python_wrapper/pyproject.toml

      - name: build sdist
        if: ${{ matrix.os == 'ubuntu' && matrix.target == 'x86_64' && matrix.manylinux == 'auto' }}
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out ../../dist
          rust-toolchain: stable
          working-directory: src/python_wrapper

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out ../../dist --interpreter '3.9 3.10 3.11'
          rust-toolchain: stable
          docker-options: -e CI
          working-directory: src/python_wrapper

      - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_${{ matrix.os }}_${{ matrix.target }}_${{ matrix.manylinux }}
          path: dist

  cedeartifact_pypi_upload:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ env.DEFAULT_PYTHON_VERSION }}"
      - run: pip install -U twine
      - uses: actions/download-artifact@v4
        with:
          name: pypi_files_*
          merge-multiple: true
          path: dist
      - run: du -shc dist/*

      # - uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ARTIFACTS_CDK_OIDC }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Upload package
      #   run: |
      #     export TWINE_USERNAME=aws
      #     export TWINE_PASSWORD="$(aws codeartifact get-authorization-token --domain certora --domain-owner ${{ secrets.AWS_PYPI_DOMAIN_OWNER }} --region us-west-2 --query authorizationToken --output text)"
      #     export TWINE_REPOSITORY_URL="$(aws codeartifact get-repository-endpoint --domain certora --domain-owner ${{ secrets.AWS_PYPI_DOMAIN_OWNER }} --region us-west-2 --repository Certora-Internal --format pypi --query repositoryEndpoint --output text)"
      #     twine upload --repository codeartifact dist/*

      # - name: Github Release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: |
      #       dist/*
      #       CHANGELOG.md
