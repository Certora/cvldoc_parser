defines:
  smoke-test: &smoke-test
    name: Smoke test
    command: |
      wget https://raw.githubusercontent.com/Certora/natspecTools/master/tests/basic_tests/definition_test.spec

      python -c "import cvldoc_parser
      parsed = cvldoc_parser.parse([\"definition_test.spec\"])
      assert len(parsed[0]) == 3, \"should parse to 3 elements\""

  store-and-persist:
    - store_artifacts: &store-wheel
        path: ./src/python_wrapper/target/wheels
    - persist_to_workspace: &persist-wheel
        root: ./src/python_wrapper/target
        paths:
          - wheels/*
  
  upgrade-pip: &upgrade-pip
    - run:
        name: Update pip
        command: pip install --upgrade pip
  
  install-maturin: &install-maturin
    - run: 
        name: Install maturin
        command: pip install maturin
    
version: 2.1
orbs:
  rust: circleci/rust@1.6.0
  win: circleci/windows@4.1.1
jobs:
  unit-tests:
    docker:
      - image: cimg/rust:1.64.0
    steps:
      - checkout
      - run:
          name: Install ripgrep
          command: sudo apt-get install ripgrep
      - run:
          name: Check version matches of Cargo.toml, pyproject.toml and CHANGELOG
          command: |
            function fail {
                echo "$1"
                status=1
            }

            CORE_DIR="${PWD}"
            PYTHON_MODULE_DIR="${CORE_DIR}/src/python_wrapper"

            CORE_CARGOTOML_VER=$(rg '^version = "(.+)"$' -o -r '$1' ${CORE_DIR}/Cargo.toml)
            CORE_LATEST_CHANGELOG_VER=$(rg '\[(\d+\.\d+\.\d+)\]' -o -r '$1' -m 1 ${CORE_DIR}/CHANGELOG.md)

            MODULE_CARGOTOML_VER=$(rg '^version = "(.+)"$' -o -r '$1' ${PYTHON_MODULE_DIR}/Cargo.toml) 
            PYPROJ_VER=$(rg '^version = "(.+)"$' -o -r '$1' ${PYTHON_MODULE_DIR}/pyproject.toml)
            MODULE_LATEST_CHANGELOG_VER=$(rg '\[(\d+\.\d+\.\d+)\]' -o -r '$1' -m 1 ${PYTHON_MODULE_DIR}/CHANGELOG.md)

            [[ $CORE_CARGOTOML_VER == $CORE_LATEST_CHANGELOG_VER ]] || fail "Core Cargo.toml version (${CORE_CARGOTOML_VER}) doesn't match latest version in CHANGELOG (${CORE_LATEST_CHANGELOG_VER})"
            [[ $MODULE_CARGOTOML_VER == $MODULE_LATEST_CHANGELOG_VER ]] || fail "Python Module Cargo.toml version (${MODULE_CARGOTOML_VER}) doesn't match latest version in CHANGELOG (${MODULE_LATEST_CHANGELOG_VER})"
            [[ $MODULE_CARGOTOML_VER == $PYPROJ_VER ]] || fail "Python Module Cargo.toml version (${MODULE_CARGOTOML_VER}) doesn't match pyproject.toml version (${PYPROJ_VER})"

            exit $status
      - run:
          name: Check code formatting
          command: |
            cd src/python_wrapper
            cargo fmt --all --check
      - run:  
          name: Run cargo test
          command: cargo test
    
  build-macos-wheel:
    macos:
      xcode: 14.0.0
    steps:
      - checkout
      - rust/install
      - run:
          name: alias python and pip
          command: |
            alias python="$(which python3)"
            alias pip="$(which pip3)"
      - run: *upgrade-pip
      - run:    
          name: Build Project
          command: |
            cd src/python_wrapper
            rustup target install x86_64-apple-darwin aarch64-apple-darwin
            maturin build --target=aarch64-apple-darwin --universal2
      - store_artifacts: *store-wheel
      - persist_to_workspace: *persist-wheel

  build-linux-wheel:
    docker:
      - image: quay.io/pypa/manylinux2014_x86_64:latest
    steps:
      - checkout
      - rust/install
      - run: *install-maturin
      - run:
          name: Build Wheel
          command: |
            cd src/python_wrapper
            maturin build --bindings=pyo3
      - store_artifacts: *store-wheel
      - persist_to_workspace: *persist-wheel

  build-windows-wheel:
    executor: win/default
    steps:
      - checkout
      - run:
          <<: *upgrade-pip
          shell: bash.exe
      - run:
          <<: *install-maturin
          shell: bash.exe
      - run:
          name: Install Rust
          command: curl --proto '=https' --tlsv1.2 https://sh.rustup.rs > rustup.sh && sh rustup.sh -y
          shell: bash.exe
      - run:
          name: Fix Cargo Config
          command: |
            echo "[net]" >> ~/.cargo/config
            echo "git-fetch-with-cli = true" >> ~/.cargo/config
          shell: bash.exe
      - run:
          name: Build Wheel
          command: |
            cd src/python_wrapper
            rustup target install x86_64-pc-windows-msvc x86_64-pc-windows-gnu i686-pc-windows-msvc i686-pc-windows-gnu
            maturin build --target=x86_64-pc-windows-msvc --bindings=pyo3
          shell: bash.exe
      - store_artifacts: *store-wheel
      - persist_to_workspace: *persist-wheel

  integration-test-linux:
    docker:
      - image: python:3.7
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Downgrade pip to earliest compatible version, to test manylinux compatibility
          command: pip install pip==19.3
      - run:
          name: Install wheel
          command: pip install wheels/*manylinux*
      - run: 
          <<: *smoke-test

  integration-test-macos:
    macos:
      xcode: 14.0.0
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: brew install wget
      - run:
          name: Install wheel
          command: python3 -m pip install wheels/*macosx*
      - run: 
          <<: *smoke-test
  
  integration-test-windows:
    executor: win/default
    steps:
      - attach_workspace:
          at: .
      - run: 
          name: Install dependencies
          command: choco install wget
          shell: bash.exe
      - run:
          name: Install wheel
          command: |
            pip install --upgrade pip
            pip install wheels/*win*
          shell: bash.exe
      - run: 
          <<: *smoke-test
          shell: bash.exe
            
  publish-to-testpypi:
    docker:
      - image: cimg/python:3.10.7
    steps:
      - attach_workspace:
         at: .
      - run:
          name: Upload wheels to Test PyPI
          command: |
            pip install --user twine
            for wheel in wheels/*.whl; do
              echo "Uploading $wheel...";
              python -m twine upload --skip-existing --verbose --repository testpypi -u ${TESTPYPI_USER} -p ${TESTPYPI_PASSWORD} "${wheel}"
            done

workflows:
  unit-test-build-and-integration-test:
    jobs:
      - unit-tests
      - build-linux-wheel:
          requires:
            - unit-tests
      - build-macos-wheel:
          requires:
            - unit-tests
      - build-windows-wheel:
          requires:
            - unit-tests
      - integration-test-linux:
          requires:
            - build-linux-wheel
      - integration-test-macos:
          requires:
            - build-macos-wheel
      - integration-test-windows:
          requires:
            - build-windows-wheel
      - publish-to-testpypi:
          requires:
            - integration-test-linux
          filters:
            branches:
              only: master